# Material Acquisitions Portal (MAP)

## Overview
The Material Acquisitions Portal (MAP) is a Django-based web application designed to streamline the management and validation of data uploads for material acquisitions. It provides a robust platform for handling various types of data templates, file uploads, and validation processes.

## Features
- **Secure Authentication**: User authentication system with role-based access control
- **Multiple Data Templates**: Support for various data types including:
  - Vendor Master Data
  - Item Master Data
  - Purchase History
  - Invoice Data
  - Contracts
  - Facilities
  - Departments

- **File Upload Management**:
  - CSV file validation
  - Automated header verification
  - Data format checking
  - File organization with year/month/day structure
  - Preview functionality

- **Data Validation**:
  - Template-specific validation rules
  - Comprehensive error reporting
  - Batch validation capabilities
  - Status tracking (pending, validating, approved, rejected)

- **Modern Admin Interface**:
  - Enhanced Django admin with custom styling
  - File preview functionality
  - Batch actions
  - Responsive design
  - Dark mode support

## Technical Stack
- **Backend**: Django 5.0
- **Python Version**: 3.11.6
- **Database**: SQLite (default)
- **Frontend**:
  - Bootstrap 5.3.2
  - Bootstrap Icons 1.11.2
  - Custom CSS/JS

### Dependencies
- django-import-export
- django-crispy-forms
- crispy-bootstrap5
- pandas (for CSV processing)

## Installation

1. Clone the repository:
```bash
git clone <repository-url>
cd data_collection_portal
```

2. Create and activate a virtual environment:
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. Install dependencies:
```bash
pip install -r requirements.txt
```

4. Apply migrations:
```bash
python manage.py makemigrations
python manage.py migrate
```

5. Create a superuser:
```bash
python manage.py createsuperuser
```

6. Collect static files:
```bash
python manage.py collectstatic
```

7. Run the development server:
```bash
python manage.py runserver
```

## Project Structure
```
data_collection_portal/
├── collection/                 # Main application
│   ├── migrations/            # Database migrations
│   ├── static/                # Static files
│   │   ├── css/              
│   │   └── js/               
│   ├── templates/            # HTML templates
│   │   └── collection/
│   ├── admin.py              # Admin configuration
│   ├── models.py             # Data models
│   ├── urls.py               # URL configurations
│   └── views.py              # View logic
├── static/                    # Project-wide static files
├── templates/                 # Project-wide templates
├── manage.py
└── requirements.txt
```

## Usage

### Data Templates
1. Access the admin interface at `/admin`
2. Create data templates with required headers
3. Configure validation rules for each template type

### File Upload Process
1. Navigate to the home page
2. Select the appropriate data type
3. Upload CSV file
4. System validates the file structure and content
5. Review validation results
6. Download template if needed

### Validation Rules
The system checks for:
- Required headers presence
- Data format compliance
- Business logic rules specific to each template type
- File structure and encoding

## Configuration

### Template Types
Available template types are defined in `DataTemplate` model:
- Vendor Master
- Item Master
- Purchase History
- Invoice Data
- Contract
- Facility
- Department

### File Storage
Files are stored with a structured path:
```
uploads/YYYY/MM/DD/template_type_YYYYMMDD_HHMMSS.csv
```

## Contributing
1. Fork the repository
2. Create a feature branch
3. Commit your changes
4. Push to the branch
5. Create a Pull Request

## Security Considerations
- All file uploads are validated
- User authentication required
- CSRF protection enabled
- Secure file handling
- Input validation and sanitization

## Troubleshooting

### Common Issues
1. File Upload Errors
   - Check file format (must be CSV)
   - Verify encoding (UTF-8 required)
   - Ensure headers match template

2. Validation Failures
   - Review error messages in validation summary
   - Check data format compliance
   - Verify required fields are present

### Debug Mode
Set `DEBUG = True` in settings.py for detailed error messages during development.

## License
[Add your license information here]

## Contact
[Add your contact information here]

## Acknowledgments
- Django Framework
- Bootstrap
- Other contributors